#include <iostream>
using namespace std;
class RBT
{
private:
    struct node_t
    {
        node_t* parent;
        node_t* left;
        node_t* right;
        int key;
        bool color;
        // true = red  false = black;
    };


private:
    node_t* root_;


public:
    RBT()
    {
        root_ = nullptr;
    }

    node_t* root() const
    {
        return root_;
    }

    node_t* grandparent(node_t* node)
    {
        if ((node != nullptr) && (node->parent != nullptr))
            return node->parent->parent;
        else
            return nullptr;
    }

    node_t* uncle(node_t* node)
    {
        node_t* g = grandparent(node);
        if (g == nullptr)
            return nullptr;
        if (node->parent == g->left)
            return g->right;
        else
            return g->left;
    }
	
    void requirement1(node_t* node)
    {
        if (node->parent == nullptr)
        {
            node->color = false;
        }
        else
            requirement2(node);
    }
	
    void requirement2(node_t* node)
    {
        if (node->parent->color == false)
            return;
        else
            requirement3(node);
    }
	
    void requirement3(node_t* node)
    {
        node_t* u = uncle(node);
        node_t* g;
        if ((u != nullptr) && (u->color == true))
        {
            node->parent->color = false;
            u->color = false;
            g = grandparent(node);
            g->color = true;
            requirement1(g);
        }
        else
        {
            requirement4(node);
        }
    }
	
    void requirement4(node_t* node)
    {
        node_t* g = grandparent(node);
        if ((node == node->parent->right) && (node->parent == g->left))
        {
            rotate_left(node->parent);
            node = node->left;
        }
        else if ((node == node->parent->left) && (node->parent == g->right))
        {
            rotate_right(node->parent);
            node = node->right;
        }
        requirement5(node);
    }
	
    void requirement5(node_t* node)
    {
        node_t* g = grandparent(node);
        node->parent->color = false;
        g->color = true;
        if ((node == node->parent->left) && (node->parent == g->left))
        {
            rotate_right(g);
        }
        else if ((node == node->parent->right) && (node->parent == g->right))
        {
            rotate_left(g);
        }
    }
	
    void rotate_left(node_t* node)
    {
        node_t* branch = node->right;
        branch->parent = node->parent;
        if (node->parent != nullptr)
        {
            if (node->parent->left == node)
                node->parent->left = branch;
            else
                node->parent->right = branch;
        }
        node->right = branch->left;
        if (branch->left != nullptr)
            branch->left->parent = node;
        node->parent = branch;
        branch->left = node;
    }

    void rotate_right(node_t* node)
    {
        node_t* branch = node->left;
        branch->parent = node->parent;
        if (node->parent != nullptr)
        {
            if (node->parent->left == node)
                node->parent->left = branch;
            else
                node->parent->right = branch;
        }
        node->left = branch->right;
        if (branch->right != nullptr)
            branch->right->parent = node;


        node->parent = branch;
        branch->right = node;
    }

	 void insert(int key)
    {
        node_t* node = new node_t;
        node->key = key;
        node->right = nullptr;
        node->left = nullptr;
        if (root_ == nullptr)
        {
            root_ = node;
            root_->parent = nullptr;
            root_->color = false;
            return;
        }
        node_t* branch = root_;
        while (branch != nullptr)
        {
            if (branch->key < key)
            {
                if (branch->right != nullptr)
                {
                    branch = branch->right;
                }
                else
                {
                    branch->right = node;
                    branch->right->parent = branch;
                    branch->right->color = true;
                    requirement1(branch->right);
                    return;
                }
            }
            else if (branch->key > key)
            {
                if (branch->left != nullptr)
                {
                    branch = branch->left;
                }
                else
                {
                    branch->left = node;
                    branch->left->parent = branch;
                    branch->right->color = true;
                    requirement1(branch->left);
                    return;
                }
            }
            else
                return;
        }
    }
	
    void print(std::ostream& stream, int level, node_t* node) const
    {
        if (node == nullptr)
            return;


        print(stream, level + 1, node->right);


        for (unsigned int i = 0; i < level; i++)
        {
            stream << "---";
        }
        stream << node->key << endl;


        print(stream, level + 1, node->left);
    }
	
    void del(node_t* node)
    {
        if (node != nullptr)
        {
            del(node->left);
            del(node->right);
            delete node;
        }
    }
	
    ~RBT()
    {
        del(root_);
    }
    bool equal(node_t* lhs, node_t* rhs) const
    {
        if (lhs == nullptr && rhs == nullptr)
            return true;

        else if (lhs != nullptr && rhs != nullptr && lhs->key == rhs->key)
        {
            return (equal(lhs->left, rhs->left) && equal(lhs->right, rhs->right));
        }
        else
            return false;
    }
};
